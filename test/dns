#!/usr/bin/env python

import untwisted
from testify import *
from untwisted import dns, promise, udp

@test
def lookup():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com').then(lambda actual: equal('1.2.3.4', actual.answer.address))

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\1\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\7example\3com\0\0\1\0\1\7example\3com\0\0\1\0\1\0\0\0\0\0\4\1\2\3\4')

@test
def compress():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com').then(lambda actual: equal('1.2.3.4', actual.answer.address))

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\1\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\7example\3com\0\0\1\0\1\xc0\x0c\0\1\0\1\0\0\0\0\0\4\1\2\3\4')

@test
def many():
  expect(4)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  def callback(actual):
    a, b, c = actual.answer

    equal('1.1.1.1', a.address)
    equal('2.2.2.2', b.address)
    equal('3.3.3.3', c.address)

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com').then(callback)

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\1\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\3\0\0\0\0\7example\3com\0\0\1\0\1\7example\3com\0\0\1\0\1\0\0\0\0\0\4\1\1\1\1\7example\3com\0\0\1\0\1\0\0\0\0\0\4\2\2\2\2\7example\3com\0\0\1\0\1\0\0\0\0\0\4\3\3\3\3')

@test
def header():
  expect(10)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  def callback(actual):
    equal(0xabcd, actual.header.id)

    ok(actual.header.qr)
    equal(0xf, actual.header.opcode)
    ok(actual.header.aa)
    ok(actual.header.tc)
    ok(actual.header.rd)

    ok(actual.header.ra)
    equal(7, actual.header.z)
    equal(0, actual.header.rcode)

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com').then(callback)

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\1\0\1'))

  transport.recv.__self__('\xab\xcd\xff\xf0\0\0\0\0\0\0\0\0')

@test
def rcode():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  class callback:
    throw = staticmethod(ok)

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com').then(callback)

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\1\0\1'))

  transport.recv.__self__('\xab\xcd\xff\xff\0\0\0\0\0\0\0\0')

@test
def question():
  expect(4)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  def callback(actual):
    equal('example.com.', actual.question.qname)
    equal(dns.A, actual.question.qtype)
    equal(dns.IN, actual.question.qclass)

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com').then(callback)

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\1\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\7example\3com\0\0\1\0\1\7example\3com\0\0\1\0\1\0\0\0\0\0\4\1\2\3\4')

@test
def ns():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com', dns.NS).then(lambda actual: equal('expect.example.com.', actual.answer.nsdname))

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\2\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\7example\3com\0\0\2\0\1\7example\3com\0\0\2\0\1\0\0\0\0\0\x14\6expect\7example\3com\0')

@test
def nsCompress():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com', dns.NS).then(lambda actual: equal('expect.example.com.', actual.answer.nsdname))

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\2\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\7example\3com\0\0\2\0\1\xc0\x0c\0\2\0\1\0\0\0\0\0\x09\6expect\xc0\x0c')

@test
def ptr():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('4.3.2.1.in-addr.arpa', dns.PTR).then(lambda actual: equal('expect.example.com.', actual.answer.ptrdname))

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\1\x34\1\x33\1\x32\1\x31\7in-addr\4arpa\0\0\x0c\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\1\x34\1\x33\1\x32\1\x31\7in-addr\4arpa\0\0\x0c\0\1\1\x34\1\x33\1\x32\1\x31\7in-addr\4arpa\0\0\x0c\0\1\0\0\0\0\0\x14\6expect\7example\3com\0')

@test
def mx():
  expect(3)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  def callback(actual):
    equal(0xabcd, actual.answer.preference)
    equal('expect.example.com.', actual.answer.exchange)

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com', dns.MX).then(callback)

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\x0f\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\7example\3com\0\0\x0f\0\1\7example\3com\0\0\x0f\0\1\0\0\0\0\0\x16\xab\xcd\6expect\7example\3com\0')

@test
def srv():
  expect(5)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  def callback(actual):
    equal(0xaaaa, actual.answer.priority)
    equal(0xbbbb, actual.answer.weight)
    equal(0xcccc, actual.answer.port)
    equal('expect.example.com.', actual.answer.target)

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('_service._proto.example.com', dns.SRV).then(callback)

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\x08_service\6_proto\7example\3com\0\0\x21\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\x08_service\6_proto\7example\3com\0\0\x21\0\1\x08_service\6_proto\7example\3com\0\0\x21\0\1\0\0\0\0\0\x1a\xaa\xaa\xbb\xbb\xcc\xcc\6expect\7example\3com\0')

@test
def absolute():
  expect(1)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com.')

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\1\0\1'))

@test
def server():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect

  @untwisted.partial(setattr, udp, 'connect')
  def _(host, port):
    equal('expect', host)
    equal('domain', port)

    return lambda: transport

  try:
    dns.lookup('example.com', server='expect')

  finally:
    udp.connect = connect
