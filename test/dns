#!/usr/bin/env python

import untwisted
from testify import *
from untwisted import dns, promise, udp

@test
def lookup():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com').then(lambda actual: equal('1.2.3.4', actual.answer.address))

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\1\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\7example\3com\0\0\1\0\1\7example\3com\0\0\1\0\1\0\0\0\0\0\4\1\2\3\4')

@test
def compress():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com').then(lambda actual: equal('1.2.3.4', actual.answer.address))

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\1\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\7example\3com\0\0\1\0\1\xc0\x0c\0\1\0\1\0\0\0\0\0\4\1\2\3\4')

@test
def many():
  expect(4)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  def callback(actual):
    a, b, c = actual.answer

    equal('1.1.1.1', a.address)
    equal('2.2.2.2', b.address)
    equal('3.3.3.3', c.address)

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com').then(callback)

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\1\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\3\0\0\0\0\7example\3com\0\0\1\0\1\7example\3com\0\0\1\0\1\0\0\0\0\0\4\1\1\1\1\7example\3com\0\0\1\0\1\0\0\0\0\0\4\2\2\2\2\7example\3com\0\0\1\0\1\0\0\0\0\0\4\3\3\3\3')

@test
def ns():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('example.com', dns.NS).then(lambda actual: equal('expect.example.com.', actual.answer.nsdname))

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\7example\3com\0\0\2\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\7example\3com\0\0\2\0\1\7example\3com\0\0\2\0\1\0\0\0\0\0\x14\6expect\7example\3com\0')

@test
def srv():
  expect(3)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  def callback(actual):
    equal(0xabcd, actual.answer.port)
    equal('expect.example.com.', actual.answer.target)

  connect = udp.connect
  udp.connect = lambda host, port: lambda: transport

  try:
    dns.lookup('_service._proto.example.com', dns.SRV).then(callback)

  finally:
    udp.connect = connect

  transport.write.shift().then(untwisted.partial(equal, '\0\0\1\0\0\1\0\0\0\0\0\0\x08_service\6_proto\7example\3com\0\0\x21\0\1'))

  transport.recv.__self__('\0\0\x81\x80\0\1\0\1\0\0\0\0\x08_service\6_proto\7example\3com\0\0\x21\0\1\x08_service\6_proto\7example\3com\0\0\x21\0\1\0\0\0\0\0\x1a\0\0\0\0\xab\xcd\6expect\7example\3com\0')

@test
def server():
  expect(2)

  class transport:
    recv = promise.sequence().shift
    write = promise.sequence()

  connect = udp.connect

  @untwisted.partial(setattr, udp, 'connect')
  def _(host, port):
    equal('expect', host)
    equal('domain', port)

    return lambda: transport

  try:
    dns.lookup('example.com', server='expect')

  finally:
    udp.connect = connect
