#!/usr/bin/env python

import untwisted
from testify import *
from untwisted import db

@test
def connect():
  expect(2)

  class module:

    @staticmethod
    def connect(*args, **kwds):
      equal(('First', 'Second', 'Third'), args)
      equal({ 'First': 'Tsrif', 'Second': 'Dnoces', 'Third': 'Driht' }, kwds)

  db.connect('First', 'Second', 'Third', First='Tsrif', Second='Dnoces', Third='Driht', module=module)

@test
def cursor():
  expect(1)

  class module:
    class connect:
      cursor = untwisted.partial(ok, True)

  db.connect(module=module).cursor()

@test
def close():
  expect(1)

  class module:
    class connect:
      class cursor:
        close = untwisted.partial(ok, True)

  db.connect(module=module).cursor().close()

@test
def execute():
  expect(2)

  class module:
    class connect:
      class cursor:
        def execute(ctx, operation, params):
          equal('Expect', operation)
          equal((), params)

  db.connect(module=module).cursor().execute('Expect')

@test
def executeScalar():
  expect(1)

  class module:
    class connect:
      class cursor:
        execute = lambda ctx, operation, params: equal('Expect', params)

  db.connect(module=module).cursor().execute('Operation', 'Expect')

@test
def executeSequence():
  expect(1)

  class module:
    class connect:
      class cursor:
        execute = lambda ctx, operation, params: equal(('First', 'Second', 'Third'), params)

  db.connect(module=module).cursor().execute('Operation', ('First', 'Second', 'Third'))

@test
def executeArgs():
  expect(1)

  class module:
    class connect:
      class cursor:
        execute = lambda ctx, operation, params: equal(('First', 'Second', 'Third'), params)

  db.connect(module=module).cursor().execute('Operation', 'First', 'Second', 'Third')

@test
def executeGoneAway():
  expect(4)

  class module:
    class OperationalError:
      pass

    @classmethod
    @untwisted.each
    def connect():
      yield

      class sample:
        class cursor:
          def execute(ctx, operation, params):
            equal('Expect', operation)
            equal((), params)

            raise module.OperationalError

      yield sample

      class sample:
        class cursor:
          def execute(ctx, operation, params):
            equal('Expect', operation)
            equal((), params)

      yield sample

  db.connect(module=module).cursor().execute('Expect')

@test
def fetchone():
  class module:
    class connect:
      class cursor:
        fetchone = lambda ctx: 'Expect'

  equal('Expect', db.connect(module=module).cursor().fetchone())
