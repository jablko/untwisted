#!/usr/bin/env python

import exceptions, gc, re, sys, untwisted
from StringIO import StringIO
from testify import *
from untwisted import event

class Exception(exceptions.Exception):
  pass

# Throw

stderr = sys.stderr
sys.stderr = StringIO()

try:
  event.event().throw(Exception('Expect'))

finally:
  stderr, sys.stderr = sys.stderr, stderr

ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+  File "%s", line \d+, in <module>
    event.event\(\).throw\(Exception\('Expect'\)\)
Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+Exception: Expect
''' % re.escape(__file__), stderr.getvalue()), stderr.getvalue())

# Raise

# Don't use decorator to avoid any assignment
def callback(*args, **kwds):
  raise Exception('Expect')

stderr = sys.stderr
sys.stderr = StringIO()

try:
  event.event()('Call').connect(callback)

  gc.collect()

finally:
  stderr, sys.stderr = sys.stderr, stderr

ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+  File "%s", line \d+, in callback
    raise Exception\('Expect'\)
Exception: Expect
''' % re.escape(__file__), stderr.getvalue()), stderr.getvalue())

# Throw type, value, traceback

try:
  raise Exception('Expect')

except Exception:
  pass

stderr = sys.stderr
sys.stderr = StringIO()

try:
  event.event().throw(*sys.exc_info())

finally:
  stderr, sys.stderr = sys.stderr, stderr

ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
  File "%s", line \d+, in <module>
    raise Exception\('Expect'\)
Exception: Expect
''' % re.escape(__file__), stderr.getvalue()), stderr.getvalue())

# Throw no argument

try:
  raise Exception('Expect')

except Exception:
  pass

stderr = sys.stderr
sys.stderr = StringIO()

try:
  event.event().throw()

finally:
  stderr, sys.stderr = sys.stderr, stderr

ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
  File "%s", line \d+, in <module>
    raise Exception\('Expect'\)
Exception: Expect
''' % re.escape(__file__), stderr.getvalue()), stderr.getvalue())

# Throw then raise

# Don't use decorator to avoid any assignment
class callback:

  @staticmethod
  def throw(*args, **kwds):
    raise Exception('Expect')

stderr = sys.stderr
sys.stderr = StringIO()

try:
  event.event().throw(Exception('Throw')).connect(callback)

  gc.collect()

finally:
  stderr, sys.stderr = sys.stderr, stderr

ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+  File "%s", line \d+, in throw
    raise Exception\('Expect'\)
Exception: Expect
''' % re.escape(__file__), stderr.getvalue()), stderr.getvalue())

# Raise with intervene

# Don't use decorator to avoid any assignment
def callback(*args, **kwds):
  raise Exception('Expect')

sample = event.event()
sample('Call').connect(callback)

try:
  raise Exception('Intervene')

except Exception:
  pass

stderr = sys.stderr
sys.stderr = StringIO()

try:
  sample.connect(untwisted.callback(lambda: (yield)))

  del sample

  gc.collect()

finally:
  stderr, sys.stderr = sys.stderr, stderr

ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+  File "%s", line \d+, in callback
    raise Exception\('Expect'\)
Exception: Expect
''' % re.escape(__file__), stderr.getvalue()), stderr.getvalue())

# Chain with intervene

sample = event.event()

stderr = sys.stderr
sys.stderr = StringIO()

try:

  # Reference sys.stderr
  sample.throw(Exception('Expect'))

  try:
    raise Exception('Intervene')

  except Exception:
    pass

  event.event()('Call').connect(lambda *args, **kwds: sample)

finally:
  stderr, sys.stderr = sys.stderr, stderr

ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+  File "%s", line \d+, in <module>
    sample.throw\(Exception\('Expect'\)\)
Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+Exception: Expect
''' % re.escape(__file__), stderr.getvalue()), stderr.getvalue())
