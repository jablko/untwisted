#!/usr/bin/env python

from testify import *
from untwisted import event

# Call then throw

sample = event.event()
equal(sample('Call'), sample)

try:
  ok(False, sample.throw(Exception))

except StopIteration:
  pass

# Connect
sample = event.event()
equal(sample.connect('Connect'), sample)

# Throw then call

sample = event.event()
equal(sample.throw(Exception), sample)

try:
  ok(False, sample('Call'))

except StopIteration:
  pass

# Supress traceback

@sample.connect
class ignore:

  @staticmethod
  def throw(*args, **kwds):
    pass

@event.connect
def connectThenCall():
  expect(1)

  equal((yield event.event()), 'Connect then call')

test(lambda: connectThenCall()('Connect then call'))

@test
@event.connect
def callThenConnect():
  expect(1)

  sample = event.event()
  sample('Call then connect')
  equal((yield sample), 'Call then connect')

@event.connect
def connectThenThrow():
  expect(1)

  try:
    ok(False, (yield event.event()))

  except:
    ok(True)

test(lambda: connectThenThrow().throw(Exception))

@test
@event.connect
def throwThenConnect():
  expect(1)

  sample = event.event()
  sample.throw(Exception)

  try:
    ok(False, (yield sample))

  except:
    ok(True)
