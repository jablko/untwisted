#!/usr/bin/env python

import exceptions, untwisted
from testify import *
from untwisted import event

class Exception(exceptions.Exception):
  pass

# Connect
sample = event.event()
equal(sample, sample.connect('Connect'))

# Call
sample = event.event()
equal(sample, sample('Call'))

# Throw
sample = event.event()
equal(sample, sample.throw(Exception('Throw')))

# Suppress traceback

@sample.connect
class _:

  @staticmethod
  def throw(*args, **kwds):
    pass

# Call then call

sample = event.event()
sample('Call')

try:
  ok(False, sample('Call'))

except StopIteration:
  pass

# Call then throw

sample = event.event()
sample('Call')

try:
  ok(False, sample.throw(Exception('Throw')))

except StopIteration:
  pass

# Throw then throw

sample = event.event()
sample.throw(Exception('Throw'))

try:
  ok(False, sample.throw(Exception('Throw')))

except StopIteration:
  pass

# Suppress traceback

@sample.connect
class _:

  @staticmethod
  def throw(*args, **kwds):
    pass

# Throw then call

sample = event.event()
sample.throw(Exception('Throw'))

try:
  ok(False, sample('Call'))

except StopIteration:
  pass

# Suppress traceback

@sample.connect
class _:

  @staticmethod
  def throw(*args, **kwds):
    pass

@test
def connectThenCall():
  expect(1)

  sample = event.event()

  sample.connect(lambda actual: equal('Expect', actual))

  sample('Expect')

@test
def callThenConnect():
  expect(1)

  sample = event.event()
  sample('Expect')

  sample.connect(lambda actual: equal('Expect', actual))

@test
def connectThenThrow():
  expect(1)

  sample = event.event()

  @sample.connect
  @untwisted.head
  def _():
    try:
      ok(False, (yield))

    except Exception:
      ok(True)

  sample.throw(Exception('Throw'))

@test
def throwThenConnect():
  expect(1)

  sample = event.event()
  sample.throw(Exception('Throw'))

  @sample.connect
  @untwisted.head
  def _():
    try:
      ok(False, (yield))

    except Exception:
      ok(True)

@test
def noThrow():
  expect(1)

  sample = event.event()
  sample.throw(Exception('Throw'))
  sample.connect(lambda *args, **kwds: 'Skip')

  @sample.connect
  @untwisted.head
  def _():
    try:
      ok(False, (yield))

    except Exception:
      ok(True)

@test
def propagate():
  expect(1)

  sample = event.event()
  sample('Call').connect(lambda *args, **kwds: 'Expect')

  sample.connect(lambda actual: equal('Expect', actual))

@test
def propagateException():
  expect(1)

  sample = event.event()
  sample('Call')

  @sample.connect
  def _(*args, **kwds):
    raise Exception('Raise')

  @sample.connect
  @untwisted.head
  def _():
    try:
      ok(False, (yield))

    except Exception:
      ok(True)

@test
def propagateAndConnect():
  expect(1)

  sample = event.event()
  sample('Call')

  @sample.connect
  def _(*args, **kwds):
    sample.connect(lambda actual: equal('Expect', actual))

    return 'Expect'

@test
def chain():
  expect(1)

  sample = event.event()
  event.event()('Expect').connect(sample)

  sample.connect(lambda actual: equal('Expect', actual))

# Call then chain

sample = event.event()
sample('Call')

try:
  ok(False, event.event()('Chain').connect(sample))

except StopIteration:
  pass

# Chain then call

sample = event.event()
event.event()('Chain').connect(sample)

try:
  ok(False, sample('Call'))

except StopIteration:
  pass

@test
def propagateEvent():
  expect(1)

  sample = event.event()
  sample('Call').connect(lambda *args, **kwds: event.event()('Expect'))

  sample.connect(lambda actual: equal('Expect', actual))
