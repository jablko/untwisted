#!/usr/bin/env python

from testify import *
from untwisted import event

sample = event.event()
equal(sample('Call'), sample)

try:
  sample.throw('Throw')

  ok(False)

except StopIteration:
  pass

sample = event.event()
equal(sample.connect('Connect'), sample)

sample = event.event()
equal(sample.throw('Throw'), sample)

try:
  sample('Call')

  ok(False)

except StopIteration:
  pass

@event.connect
def connectThenCall():
  expect(1)

  equal(('Connect then call',), (yield event.event()))

test(lambda: connectThenCall()('Connect then call'))

@test
@event.connect
def callThenConnect():
  expect(1)

  sample = event.event()
  sample('Call then connect')
  equal(('Call then connect',), (yield sample))

@event.connect
def connectThenThrow():
  expect(1)

  try:
    yield event.event()

    ok(False)

  except:
    ok(True)

test(lambda: connectThenThrow().throw(Exception))

@test
@event.connect
def throwThenConnect():
  expect(1)

  sample = event.event()
  sample.throw(Exception)

  try:
    yield sample

    ok(False)

  except:
    ok(True)
