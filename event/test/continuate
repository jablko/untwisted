#!/usr/bin/env python

import exceptions, untwisted
from testify import *
from untwisted import event

class Exception(exceptions.Exception):
  pass

@test
@event.continuate
def continuate():
  expect(1)

  equal('Expect', (yield event.event()('Expect')))

@test
@event.continuate
def continuateNonEvent():
  expect(1)

  equal('Expect', (yield 'Expect'))

@test
def propagateException():
  expect(1)

  @untwisted.call
  @event.continuate
  def sample():
    raise Exception('Raise')

    yield

  @sample.connect
  @untwisted.head
  def _():
    try:
      ok(False, (yield))

    except Exception:
      ok(True)

@test
def propagateStopIteration():
  expect(2)

  @untwisted.call
  @event.continuate
  def sample():
    raise event.StopIteration('First', 'Second', 'Third', True=True, False=False)

    yield

  sample.connect(lambda *args, **kwds: (equal(('First', 'Second', 'Third'), args), equal({ 'True': True, 'False': False }, kwds)))

@test
def propagateStopIterationEvent():
  expect(2)

  @untwisted.call
  @event.continuate
  def sample():
    raise event.StopIteration(event.event()('First'), event.event()('Second'), event.event()('Third'), True=True, False=False)

    yield

  sample.connect(lambda *args, **kwds: (equal(('First', 'Second', 'Third'), args), equal({ 'True': True, 'False': False }, kwds)))
