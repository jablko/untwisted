#!/usr/bin/env python

import functools, re, untwisted
from testify import *
from untwisted import event, rfc5321, smtp

@test
def send():
  expect(6)

  class client(smtp.client):

    @untwisted.each
    def mail():
      class sample(smtp.client.mail):
        mail = iter(('alice@example.com',)).next

        recipient = iter(('bob@example.com',)).next

        data = iter(('Expect',)).next

      yield sample.__get__((yield))()

  class transport:
    class protocol:
      dataReceived = event.sequence()

    write = event.sequence()

  client(transport)

  event.nowThen((event.nowThen(transport.write.shift(),
        functools.partial(ok, False)),
      transport.protocol.dataReceived('220\r\n'))[0],
    lambda actual: ok(re.match(rfc5321.ehlo, actual), actual))

  event.nowThen((event.nowThen(transport.write.shift(),
        functools.partial(ok, False)),
      transport.protocol.dataReceived('250\r\n'))[0],
    functools.partial(equal, 'MAIL FROM:<alice@example.com>\r\n'))

  event.nowThen((event.nowThen(transport.write.shift(),
        functools.partial(ok, False)),
      transport.protocol.dataReceived('250\r\n'))[0],
    functools.partial(equal, 'RCPT TO:<bob@example.com>\r\n'))

  event.nowThen((event.nowThen(transport.write.shift(),
        functools.partial(ok, False)),
      transport.protocol.dataReceived('250\r\n'))[0],
    functools.partial(equal, 'DATA\r\n'))

  event.nowThen((event.nowThen(transport.write.shift(),
        functools.partial(ok, False)),
      transport.protocol.dataReceived('354\r\n'))[0],
    functools.partial(equal, 'Expect\r\n.\r\n'))

  event.nowThen((event.nowThen(transport.write.shift(),
        functools.partial(ok, False)),
      transport.protocol.dataReceived('250\r\n'))[0],
    functools.partial(equal, 'QUIT\r\n'))

  transport.protocol.dataReceived('221\r\n')
