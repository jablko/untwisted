#!/usr/bin/env python

import untwisted
from testify import *
from untwisted import promise, smtp

@test
def data():
  expect(2)

  class transport:
    class protocol:
      dataReceived = promise.sequence()

    write = promise.sequence()

  client = type.__call__(smtp.client, transport)
  sample = type.__call__(client.mail)

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      sample.dataCmd('Expect'))[0],
    untwisted.partial(equal, 'DATA\r\n'))

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      transport.protocol.dataReceived('354\r\n'))[0],
    untwisted.partial(equal, 'Expect\r\n.\r\n'))

@test
def dataCrlf():
  expect(2)

  class transport:
    class protocol:
      dataReceived = promise.sequence()

    write = promise.sequence()

  client = type.__call__(smtp.client, transport)
  sample = type.__call__(client.mail)

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      sample.dataCmd('Expect\r\n'))[0],
    untwisted.partial(equal, 'DATA\r\n'))

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      transport.protocol.dataReceived('354\r\n'))[0],
    untwisted.partial(equal, 'Expect\r\n.\r\n'))

@test
def reply():
  expect(1)

  class transport:
    class protocol:
      dataReceived = promise.sequence()

    write = promise.sequence()

  client = type.__call__(smtp.client, transport)
  client.reply(untwisted.wildcard)
  transport.protocol.dataReceived('456 Ignore\r\n234 Expect\r\n')

  client.reply().then(untwisted.compose(untwisted.partial(equal, '234 Expect\r\n'), str))
