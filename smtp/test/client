#!/usr/bin/env python

import gc, re, sys, untwisted
from StringIO import StringIO
from testify import *
from untwisted import promise, smtp

@test
def data():
  expect(2)

  class transport:
    class protocol:
      dataReceived = promise.sequence()

    write = promise.sequence()

  client = type.__call__(smtp.client, transport)
  sample = type.__call__(client.mail)

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      sample.dataCmd('Expect'))[0],
    untwisted.partial(equal, 'DATA\r\n'))

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      transport.protocol.dataReceived('354\r\n'))[0],
    untwisted.partial(equal, 'Expect\r\n.\r\n'))

@test
def dataCrlf():
  expect(2)

  class transport:
    class protocol:
      dataReceived = promise.sequence()

    write = promise.sequence()

  client = type.__call__(smtp.client, transport)
  sample = type.__call__(client.mail)

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      sample.dataCmd('Expect\r\n'))[0],
    untwisted.partial(equal, 'DATA\r\n'))

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      transport.protocol.dataReceived('354\r\n'))[0],
    untwisted.partial(equal, 'Expect\r\n.\r\n'))

@test
def reply():
  expect(1)

  class transport:
    class protocol:
      dataReceived = promise.sequence()

  client = type.__call__(smtp.client, transport)
  client.reply()

  transport.protocol.dataReceived('234 Ignore\r\n256 Expect\r\n')

  client.reply().then(untwisted.compose(untwisted.partial(equal, '256 Expect\r\n'), str))

@test
def replyTraceback():
  class transport:
    class protocol:
      dataReceived = promise.sequence()

  client = type.__call__(smtp.client, transport)

  transport.protocol.dataReceived('456 Not expect\r\n')

  stderr = sys.stderr
  sys.stderr = StringIO()

  try:
    client.reply()
    client.reply()

    del client, transport

    gc.collect()

  finally:
    stderr, sys.stderr = sys.stderr, stderr

  ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+reply: 456 Not expect\r\n
''', stderr.getvalue()), stderr.getvalue())

@test
def replyNotHead():
  expect(1)

  class transport:
    class protocol:
      dataReceived = promise.sequence()

  client = type.__call__(smtp.client, transport)
  sample = client.reply()

  transport.protocol.dataReceived('234 Expect\r\n')

  client.reply()

  sample.then(untwisted.compose(untwisted.partial(equal, '234 Expect\r\n'), str))
