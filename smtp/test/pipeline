#!/usr/bin/env python

import untwisted
from qwer import *
from testify import *
from untwisted import promise, rfc5234, rfc5321, smtp

@test
def client():
  expect(6)

  class client(smtp.pipeline):

    @untwisted.each
    def mail():
      ctx = yield

      class sample(smtp.pipeline.mail):
        mail = iter(('alice@example.com',)).next
        recipient = iter(('bob@example.com',)).next
        data = iter(('Expect',)).next

      yield sample.__get__(ctx)()

  class transport:
    class protocol:
      dataReceived = promise.sequence()

    write = promise.sequence()

  client(transport)

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      transport.protocol.dataReceived('220\r\n'))[0],
    untwisted.compose(untwisted.partial(ok, True), rfc5321.ehlo.match))

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      transport.protocol.dataReceived('250-example.com\r\n250 PIPELINING\r\n'))[0],
    untwisted.partial(equal, 'MAIL FROM:<alice@example.com>\r\n'))

  promise.nowThen(transport.write.shift(),
    untwisted.partial(equal, 'RCPT TO:<bob@example.com>\r\n'))

  promise.nowThen(transport.write.shift(),
    untwisted.partial(equal, 'DATA\r\n'))

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      transport.protocol.dataReceived('250\r\n250\r\n354\r\n'))[0],
    untwisted.partial(equal, 'Expect\r\n.\r\n'))

  promise.nowThen(transport.write.shift(),
    untwisted.partial(equal, 'QUIT\r\n'))

  transport.protocol.dataReceived('250\r\n221\r\n')

@test
def server():
  expect(11)

  class server(smtp.server):

    @untwisted.each
    def mail():
      ctx = yield

      class sample(smtp.server.mail):
        mail = staticmethod(untwisted.each(lambda: equal('alice@example.com', str((yield)))))
        recipient = staticmethod(untwisted.each(lambda: equal('bob@example.com', str((yield)))))
        data = staticmethod(untwisted.each(lambda: equal('Expect', (yield))))

      ctx = yield sample.__get__(ctx)()

      # QUIT
      yield smtp.server.mail.__get__(ctx)()

  class transport:
    loseConnection = staticmethod(untwisted.partial(ok, True))

    class protocol:
      dataReceived = promise.sequence()

    write = promise.sequence()

  server(transport)

  promise.nowThen(transport.write.shift(),
    untwisted.compose(untwisted.partial(ok, True), qwer('(?:220-(?:', rfc5321.textstring, ')?', rfc5234.CRLF, ')*220(?: ', rfc5321.textstring, ')?', rfc5234.CRLF).match))

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      transport.protocol.dataReceived('EHLO example.com\r\n'))[0],
    untwisted.compose(untwisted.partial(ok, True), qwer('(?:250-(?:', rfc5321.textstring, ')?', rfc5234.CRLF, ')*250 PIPELINING', rfc5234.CRLF).match))

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      transport.protocol.dataReceived('MAIL FROM:<alice@example.com>\r\nRCPT TO:<bob@example.com>\r\nDATA\r\n'))[0],
    untwisted.partial(equal, '250 Requested mail action okay, completed\r\n'))

  promise.nowThen(transport.write.shift(),
    untwisted.partial(equal, '250 Requested mail action okay, completed\r\n'))

  promise.nowThen(transport.write.shift(),
    untwisted.partial(equal, '354 Start mail input; end with <CRLF>.<CRLF>\r\n'))

  promise.nowThen((promise.nowThen(transport.write.shift(),
        untwisted.partial(ok, False)),
      transport.protocol.dataReceived('Expect\r\n.\r\nQUIT\r\n'))[0],
    untwisted.partial(equal, '250 Requested mail action okay, completed\r\n'))

  promise.nowThen(transport.write.shift(),
    untwisted.partial(equal, '221 Service closing transmission channel\r\n'))
