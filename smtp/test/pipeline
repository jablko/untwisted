#!/usr/bin/env python

import functools, re, untwisted
from testify import *
from untwisted import event, rfc5234, rfc5321, smtp

@test
def client():
  expect(6)

  class client(smtp.pipeline):

    @untwisted.each
    def mail():
      class sample(smtp.pipeline.mail):
        mail = iter(('alice@example.com',)).next

        recipient = iter(('bob@example.com',)).next

        data = iter(('Expect',)).next

      yield sample.__get__((yield))()

  class transport:
    class protocol:
      dataReceived = event.sequence()

    write = event.sequence()

  client(transport)

  event.nowThen(transport.write.shift(),
    functools.partial(ok, False),
    lambda actual: ok(re.match(rfc5321.ehlo, actual), actual))

  transport.protocol.dataReceived('220\r\n')

  event.nowThen(transport.write.shift(),
    functools.partial(ok, False),
    functools.partial(equal, 'MAIL FROM:<alice@example.com>\r\n'))

  event.nowThen(transport.write.shift(),
    functools.partial(ok, False),
    functools.partial(equal, 'RCPT TO:<bob@example.com>\r\n'))

  event.nowThen(transport.write.shift(),
    functools.partial(ok, False),
    functools.partial(equal, 'DATA\r\n'))

  transport.protocol.dataReceived('250-example.com\r\n250 PIPELINING\r\n')

  event.nowThen(transport.write.shift(),
    functools.partial(ok, False),
    functools.partial(equal, 'Expect\r\n.\r\n'))

  event.nowThen(transport.write.shift(),
    functools.partial(ok, False),
    functools.partial(equal, 'QUIT\r\n'))

  transport.protocol.dataReceived('250\r\n250\r\n354\r\n')

  transport.protocol.dataReceived('250\r\n221\r\n')

@test
@event.continuate
def server():
  expect(10)

  class server(smtp.server):

    @untwisted.each
    def mail():
      class sample(smtp.server.mail):
        mail = staticmethod(untwisted.each(lambda: equal('alice@example.com', (yield))))

        recipient = staticmethod(untwisted.each(lambda: equal('bob@example.com', (yield))))

        data = staticmethod(untwisted.each(lambda: equal('Expect', (yield))))

      # QUIT
      yield smtp.server.mail.__get__((yield sample.__get__((yield))()))()

  class transport:
    class protocol:
      dataReceived = event.sequence()

    write = event.sequence()

  server(transport)

  actual = yield transport.write.shift()
  ok(re.match('(?:220-(?:' + rfc5321.textstring + ')?' + rfc5234.CRLF + ')*220(?: ' + rfc5321.textstring + ')?' + rfc5234.CRLF, actual), actual)

  transport.protocol.dataReceived('EHLO example.com\r\n')

  actual = yield transport.write.shift()
  ok(re.match('(?:250-(?:' + rfc5321.textstring + ')?' + rfc5234.CRLF + ')*250 PIPELINING' + rfc5234.CRLF, actual), actual)

  transport.protocol.dataReceived('MAIL FROM:<alice@example.com>\r\nRCPT TO:<bob@example.com>\r\nDATA\r\n')

  equal('250 Requested mail action okay, completed\r\n', (yield transport.write.shift()))
  equal('250 Requested mail action okay, completed\r\n', (yield transport.write.shift()))
  equal('354 Start mail input; end with <CRLF>.<CRLF>\r\n', (yield transport.write.shift()))

  transport.protocol.dataReceived('Expect\r\n.\r\nQUIT\r\n')

  equal('250 Requested mail action okay, completed\r\n', (yield transport.write.shift()))
  equal('221 Service closing transmission channel\r\n', (yield transport.write.shift()))
