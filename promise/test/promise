#!/usr/bin/env python

import exceptions, untwisted
from testify import *
from untwisted import promise

class Exception(exceptions.Exception):
  pass

# Then
sample = promise.promise()
equal(sample, sample.then('Then'))

# Call
sample = promise.promise()
equal(sample, sample('Call'))

# Throw
sample = promise.promise()
equal(sample, sample.throw(Exception('Throw')))

# Suppress traceback

@sample.then
class _:

  @staticmethod
  def throw(*args, **kwds):
    pass

# Call and call

sample = promise.promise()
sample('Call')

try:
  ok(False, sample('Call'))

except StopIteration:
  pass

# Call and throw

sample = promise.promise()
sample('Call')

try:
  ok(False, sample.throw(Exception('Throw')))

except StopIteration:
  pass

# Throw and throw

sample = promise.promise()
sample.throw(Exception('Throw'))

try:
  ok(False, sample.throw(Exception('Throw')))

except StopIteration:
  pass

# Suppress traceback

@sample.then
class _:

  @staticmethod
  def throw(*args, **kwds):
    pass

# Throw and call

sample = promise.promise()
sample.throw(Exception('Throw'))

try:
  ok(False, sample('Call'))

except StopIteration:
  pass

# Suppress traceback

@sample.then
class _:

  @staticmethod
  def throw(*args, **kwds):
    pass

@test
def thenAndCall():
  expect(1)

  sample = promise.promise()

  sample.then(untwisted.partial(equal, 'Expect'))

  sample('Expect')

@test
def callAndThen():
  expect(1)

  sample = promise.promise()
  sample('Expect')

  sample.then(untwisted.partial(equal, 'Expect'))

@test
def thenAndThrow():
  expect(1)

  sample = promise.promise()

  @sample.then
  @untwisted.head
  def _():
    try:
      ok(False, (yield))

    except Exception:
      ok(True)

  sample.throw(Exception('Throw'))

@test
def throwAndThen():
  expect(1)

  sample = promise.promise()
  sample.throw(Exception('Throw'))

  @sample.then
  @untwisted.head
  def _():
    try:
      ok(False, (yield))

    except Exception:
      ok(True)

@test
def noThrow():
  expect(1)

  sample = promise.promise()
  sample.throw(Exception('Throw'))
  sample.then(lambda *args, **kwds: 'Skip')

  @sample.then
  @untwisted.head
  def _():
    try:
      ok(False, (yield))

    except Exception:
      ok(True)

@test
def propagate():
  expect(1)

  sample = promise.promise()
  sample('Call').then(lambda *args, **kwds: 'Expect')

  sample.then(untwisted.partial(equal, 'Expect'))

@test
def propagateException():
  expect(1)

  sample = promise.promise()
  sample('Call')

  @sample.then
  def _(*args, **kwds):
    raise Exception('Raise')

  @sample.then
  @untwisted.head
  def _():
    try:
      ok(False, (yield))

    except Exception:
      ok(True)

@test
def propagateAndThen():
  expect(1)

  sample = promise.promise()
  sample('Call')

  @sample.then
  def _(*args, **kwds):
    sample.then(untwisted.partial(equal, 'Expect'))

    return 'Expect'

@test
def chain():
  expect(1)

  sample = promise.promise()
  promise.promise()('Expect').then(sample)

  sample.then(untwisted.partial(equal, 'Expect'))

# Call and chain

sample = promise.promise()
sample('Call')

try:
  ok(False, promise.promise()('Chain').then(sample))

except StopIteration:
  pass

# Chain and call

sample = promise.promise()
promise.promise()('Chain').then(sample)

try:
  ok(False, sample('Call'))

except StopIteration:
  pass

@test
def propagatePromise():
  expect(1)

  sample = promise.promise()
  sample('Call').then(lambda *args, **kwds: promise.promise()('Expect'))

  sample.then(untwisted.partial(equal, 'Expect'))
