#!/usr/bin/env python

import exceptions, untwisted
from testify import *
from untwisted import promise

class Exception(exceptions.Exception):
  pass

@test
@promise.resume
def resume():
  expect(1)

  equal('Expect', (yield promise.promise()('Expect')))

@test
@promise.resume
def resumeNonPromise():
  expect(1)

  equal('Expect', (yield 'Expect'))

@test
def propagateException():
  expect(1)

  @untwisted.call
  @promise.resume
  def sample():
    raise Exception('Raise')

    yield

  @sample.then
  @untwisted.head
  def _():
    try:
      ok(False, (yield))

    except Exception:
      ok(True)

@test
def stopIteration():
  expect(2)

  @untwisted.call
  @promise.resume
  def sample():
    True or (yield)

  @sample.then
  def _(*args, **kwds):
    equal((None,), args)
    equal({}, kwds)

@test
def stopIterationArgs():
  expect(2)

  @untwisted.call
  @promise.resume
  def sample():
    raise promise.StopIteration('First', 'Second', 'Third', First='Tsrif', Second='Dnoces', Third='Driht') or (yield)

  @sample.then
  def _(*args, **kwds):
    equal(('First', 'Second', 'Third'), args)
    equal({ 'First': 'Tsrif', 'Second': 'Dnoces', 'Third': 'Driht' }, kwds)

@test
def stopIterationPromise():
  expect(2)

  @untwisted.call
  @promise.resume
  def sample():
    raise promise.StopIteration(promise.promise()('First'), promise.promise()('Second'), promise.promise()('Third'), First='Tsrif', Second='Dnoces', Third='Driht') or (yield)

  @sample.then
  def _(*args, **kwds):
    equal(('First', 'Second', 'Third'), args)
    equal({ 'First': 'Tsrif', 'Second': 'Dnoces', 'Third': 'Driht' }, kwds)
