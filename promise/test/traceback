#!/usr/bin/env python

import exceptions, gc, re, sys, untwisted
from StringIO import StringIO
from testify import *
from untwisted import promise

class Exception(exceptions.Exception):
  pass

# Throw

stderr = sys.stderr
sys.stderr = StringIO()

try:
  promise.promise().throw(Exception('Expect'))

finally:
  stderr, sys.stderr = sys.stderr, stderr

#)+  File "{}", line \d+, in <module>
ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+  File "{0}", line \d+, in <module>
    promise.promise\(\).throw\(Exception\('Expect'\)\)
Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+Exception: Expect
'''.format(re.escape(__file__)), stderr.getvalue()), stderr.getvalue())

# Raise

# Don't use decorator to avoid any assignment
def callback(_):
  raise Exception('Expect')

stderr = sys.stderr
sys.stderr = StringIO()

try:
  promise.promise()('Call').then(callback)

  gc.collect()

finally:
  stderr, sys.stderr = sys.stderr, stderr

#)+  File "{}", line \d+, in callback
ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+  File "{0}", line \d+, in callback
    raise Exception\('Expect'\)
Exception: Expect
'''.format(re.escape(__file__)), stderr.getvalue()), stderr.getvalue())

# Throw type, value, traceback

try:
  raise Exception('Expect')

except Exception:
  pass

stderr = sys.stderr
sys.stderr = StringIO()

try:
  promise.promise().throw(*sys.exc_info())

finally:
  stderr, sys.stderr = sys.stderr, stderr

#  File "{}", line \d+, in <module>
ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
  File "{0}", line \d+, in <module>
    raise Exception\('Expect'\)
Exception: Expect
'''.format(re.escape(__file__)), stderr.getvalue()), stderr.getvalue())

# Throw no argument

try:
  raise Exception('Expect')

except Exception:
  pass

stderr = sys.stderr
sys.stderr = StringIO()

try:
  promise.promise().throw()

finally:
  stderr, sys.stderr = sys.stderr, stderr

#  File "{}", line \d+, in <module>
ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
  File "{0}", line \d+, in <module>
    raise Exception\('Expect'\)
Exception: Expect
'''.format(re.escape(__file__)), stderr.getvalue()), stderr.getvalue())

# Throw then raise

# Don't use decorator to avoid any assignment
class callback:

  @staticmethod
  def throw(_):
    raise Exception('Expect')

stderr = sys.stderr
sys.stderr = StringIO()

try:
  promise.promise().throw(Exception('Throw')).then(callback)

  gc.collect()

finally:
  stderr, sys.stderr = sys.stderr, stderr

#)+  File "{}", line \d+, in throw
ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+  File "{0}", line \d+, in throw
    raise Exception\('Expect'\)
Exception: Expect
'''.format(re.escape(__file__)), stderr.getvalue()), stderr.getvalue())

# Raise with intervene

# Don't use decorator to avoid any assignment
def callback(_):
  raise Exception('Expect')

sample = promise.promise()
sample('Call').then(callback)

try:
  raise Exception('Intervene')

except Exception:
  pass

stderr = sys.stderr
sys.stderr = StringIO()

try:
  sample.then(untwisted.head(lambda: (yield)))

  del sample

  gc.collect()

finally:
  stderr, sys.stderr = sys.stderr, stderr

#)+  File "{}", line \d+, in callback
ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+  File "{0}", line \d+, in callback
    raise Exception\('Expect'\)
Exception: Expect
'''.format(re.escape(__file__)), stderr.getvalue()), stderr.getvalue())

# Chain with intervene

sample = promise.promise()

stderr = sys.stderr
sys.stderr = StringIO()

try:

  # Reference sys.stderr
  sample.throw(Exception('Expect'))

  try:
    raise Exception('Intervene')

  except Exception:
    pass

  promise.promise()('Call').then(lambda _: sample)

finally:
  stderr, sys.stderr = sys.stderr, stderr

#)+  File "{}", line \d+, in <module>
ok(re.match('''(?:  File ".+", line \d+, in .+
    .+
)+  File "{0}", line \d+, in <module>
    sample.throw\(Exception\('Expect'\)\)
Traceback \(most recent call last\):
(?:  File ".+", line \d+, in .+
    .+
)+Exception: Expect
'''.format(re.escape(__file__)), stderr.getvalue()), stderr.getvalue())
